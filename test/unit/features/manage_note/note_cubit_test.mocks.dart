// Mocks generated by Mockito 5.3.2 from annotations
// in note_app/test/unit/features/manage_note/note_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_database/models/note_entity.dart' as _i5;
import 'package:notes_database/notes_database.dart' as _i2;
import 'package:notes_repository/notes_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotesDatabase_0 extends _i1.SmartFake implements _i2.NotesDatabase {
  _FakeNotesDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i3.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotesDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeNotesDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.NotesDatabase);
  @override
  _i4.Future<_i5.NoteEntity?> getNoteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [id],
        ),
        returnValue: _i4.Future<_i5.NoteEntity?>.value(),
      ) as _i4.Future<_i5.NoteEntity?>);
  @override
  _i4.Future<List<_i5.NoteEntity>> getNotes() => (super.noSuchMethod(
        Invocation.method(
          #getNotes,
          [],
        ),
        returnValue: _i4.Future<List<_i5.NoteEntity>>.value(<_i5.NoteEntity>[]),
      ) as _i4.Future<List<_i5.NoteEntity>>);
  @override
  _i4.Future<_i5.NoteEntity?> createNote(_i5.NoteEntity? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [input],
        ),
        returnValue: _i4.Future<_i5.NoteEntity?>.value(),
      ) as _i4.Future<_i5.NoteEntity?>);
  @override
  _i4.Future<_i5.NoteEntity?> updateNote(_i5.NoteEntity? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [input],
        ),
        returnValue: _i4.Future<_i5.NoteEntity?>.value(),
      ) as _i4.Future<_i5.NoteEntity?>);
  @override
  _i4.Future<_i5.NoteEntity?> archiveNote(int? noteId) => (super.noSuchMethod(
        Invocation.method(
          #archiveNote,
          [noteId],
        ),
        returnValue: _i4.Future<_i5.NoteEntity?>.value(),
      ) as _i4.Future<_i5.NoteEntity?>);
}
